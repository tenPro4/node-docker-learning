Example of docker Basic
------------------------

====dockerfile=====

FROM node
WORKDIR /app
COPY package.json .
RUN npm install
COPY . ./      #split two COPY because package.json no change frequently during dev. the docker can identify each step changes and only build the change step(layer) when rebuild.
ENV PORT 3000
EXPOSE $PORT
CMD node index.js


====docker_compose(base compose:default)=======
version:"3"
services:
	node-app:
		build: . /build from local dockerfile
		ports:
			- "3000:3000"
		environment:
			- PORT=3000
		## env_file:  //either environment or env_file
			- ./.env


=====docker_compose(dev)======
version:"3"
services:
	node-app:
		volumes:
			- ./:app  // same as %{cd}:/app
			- /app/node_modules
		environment:
			- NODE_ENV=development
		command:npm run dev  //override docker file command
		
		
======docker_compose(prod)==========
version:"3"
services:
	node-app:
		volumes: //this can remove as we dont need sync the changes during production mode
			- ./:app  // same as %{cd}:/app
			- /app/node_modules
		command:node index.js   //can remove this if base compose have same command
			

==========Command docker compose=============
docker compose up -d
docker compose up -d --build
docker compose down -v

##replace default base on environment
-docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
-docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
-docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build //rebuild,docker sometime cant check what change is make

-docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v


install base on environment
----------------------------
## some package we dont want to include for production mode like nodemon(devDependency)
## so need to have do something on Dockerfile with if else and argurment

======dockerfile======
FROM node
WORKDIR /app
COPY package.json .

ARG NODE_ENV
RUN IF [ "$NODE_ENV" = "development" ]; \
		then npm install; \
		else npm install --only=production; \
		fi

COPY . ./      #split two COPY because package.json no change frequently during dev. the docker can identify each step changes and only build the change step(layer) when rebuild.
ENV PORT 3000
EXPOSE $PORT
CMD node index.js


======docker-compose.dev.yml======
version:"3"
services:
	node-app:
		build:
			context: .
			args:
				NODE_ENV:development
		volumes:
			- ./:app  // same as %{cd}:/app
			- /app/node_modules
		environment:
			- NODE_ENV=development
		command:npm run dev  //override docker file command


======docker-compose.prod.yml=================
version:"3"
services:
	node-app:
		build:
			context: .
			args:
				NODE_ENV:production
		volumes: //this can remove as we dont need sync the changes during production mode
			- ./:app  // same as %{cd}:/app
			- /app/node_modules
		environment:
			- NODE_ENV=production



Two containers for docker compose example
-----------------------------------------

========docker-compose.yml=========
version:"3"
services:
	node-app:
		build: . /build from local dockerfile
		ports:
			- "3000:3000"
		environment:
			- PORT=3000
		## env_file:  //either environment or env_file
			- ./.env
		depends_on:	//this will tell docker build the mongo services first before node-app build
			- mongo
	mongo:
		image: mongo //this will go hub and download image
		environment:
			- MONGO_INITDB_ROOT_USERNAME=admin
			- MONGO_INITDB_ROOT_PASSWORD=admin
		volumes:
			- mongo-db:/data/db //mongo-db is volume name instead use default annoymous name
volumes:
	mongo-db:
	
	
====connectstring for mongo======
mongodb://username:mypassword@mongo:27017/?authSource=admin

mongo:base on services name on docker-compose, this will represent services ip address
			
			
=======docker.-compose.dev.yml========
version:"3"
services:
	node-app:
		volumes:
			- ./:app  // same as %{cd}:/app
			- /app/node_modules
		environment:
			- NODE_ENV=development
			- MONGO_USER=devAdmin
			- MONGO_PASSWORD=devAdmin
		command:npm run dev  //override docker file command
	mongoL
		environment:
			- MONGO_INITDB_ROOT_USERNAME=devAdmin
			- MONGO_INITDB_ROOT_PASSWORD=devAdmin
			

nginx
------
## nginx is a web server that can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. Refer ss docker_n_nginx.jpg

======default.conf(nginx)========
server {
	listen:80;
	
	location /api { //check whether url is start with '/api'
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		
		proxy_set_header Host $http_host
		proxy_set_header X-NginX-Proxy true;
		proxy_pass http://node-app:3000;   //if location true, then pass request to port 3000
		proxy_redirect off;
	}
}


=====docker-compose.yml=========
version:"3"
services:
	nginx:
		image:nginx:stable-alpine
		ports:
			- "any_port1:80"
		volumes:
			- ./ngix/default.conf:/etc/nginx/conf.d/default.conf:ro  //dont change unless nginx update its path(need check latest).ro=readonly
	node-app:
		build: . /build from local dockerfile
		environment:
			- PORT=3000
		## env_file:  //either environment or env_file
			- ./.env
		depends_on:	//this will tell docker build the mongo services first before node-app build
			- mongo

	mongo:
		image: mongo //this will go hub and download image
		environment:
			- MONGO_INITDB_ROOT_USERNAME=admin
			- MONGO_INITDB_ROOT_PASSWORD=admin
		volumes:
			- mongo-db:/data/db //mongo-db is volume name instead use default annoymous name
volumes:
	mongo-db:
	
	
=====docker-compose_prod.yml=========
version:"3"
services:
	nginx:
		ports:
			- "differ_any_port2:80"
	node-app:
		build:
			context: .
			args:
				NODE_ENV:production
		volumes: //this can remove as we dont need sync the changes during production mode
			- ./:app  // same as %{cd}:/app
			- /app/node_modules
		environment:
			- NODE_ENV=production

			
=======docker.-compose.dev.yml========
version:"3"
services:
	nginx:
		ports:
			- "any_port1:80"
	node-app:
		volumes:
			- ./:app  // same as %{cd}:/app
			- /app/node_modules
		environment:
			- NODE_ENV=development
			- MONGO_USER=devAdmin
			- MONGO_PASSWORD=devAdmin
		command:npm run dev  //override docker file command
	mongoL
		environment:
			- MONGO_INITDB_ROOT_USERNAME=devAdmin
			- MONGO_INITDB_ROOT_PASSWORD=devAdmin